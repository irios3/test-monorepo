---
format_version: '11'
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: ios
workflows:
  App2:
    description: |
      The workflow  the tests. The *retry_on_failure* test repetition mode is enabled.
    steps:
    - activate-ssh-key@4: {}
    - git-clone@7: {}
    - cache-pull@2: {}
    - recreate-user-schemes@1:
        inputs:
        - project_path: "$BITRISE_PROJECT_PATH"
    - xcode-test@4:
        inputs:
        - project_path: "$BITRISE_PROJECT_PATH"
        - scheme: "$BITRISE_SCHEME"
        - test_repetition_mode: retry_on_failure
    - cache-push@2: {}
    - deploy-to-bitrise-io@2: {}
  App1:
    description: |
      The workflow  the tests.
    steps:
    - activate-ssh-key@4: {}
    - git-clone@7:
        inputs:
        - clone_depth: 1
    - cache-pull@2: {}
    - recreate-user-schemes@1:
        inputs:
        - project_path: "$BITRISE_PROJECT_PATH"
    - xcode-test@4:
        inputs:
        - project_path: "$BITRISE_PROJECT_PATH"
        - scheme: "$BITRISE_SCHEME"
        - test_repetition_mode: retry_on_failure
    - cache-push@2: {}
    - deploy-to-bitrise-io@2: {}
  General:
    description: |
      The workflow to run when code not related to app has changed in PR and / or main
    steps:
    - activate-ssh-key@4: {}
    - git-clone@7:
        inputs:
        - clone_depth: 1
    - script@1.1:
        title: Decide which workflow should run
        is_always_run: true
        inputs:
        - content: |
            #ADD RUN IF PUSH NOT PR

            echo "Decision making to run workflow"
            echo "Commit on origin/main"
            LATEST_COMMIT_ON_MAIN_ORIGIN=`git log -n 1 origin/main --pretty=format:"%H"`
            echo $LATEST_COMMIT_ON_MAIN_ORIGIN

            #echo "Commit on this PR"
            #GIT_CLONE_COMMIT_HASH=`git log -n 1 --pretty=format:"%H"`
            #echo $GIT_CLONE_COMMIT_HASH

            echo "Files changed with origin"
            echo `git diff --name-only $GIT_CLONE_COMMIT_HASH $LATEST_COMMIT_ON_MAIN_ORIGIN`
            FILES_CHANGED_WITH_ORIGIN=`git diff --name-only $GIT_CLONE_COMMIT_HASH $LATEST_COMMIT_ON_MAIN_ORIGIN`


            echo "Commit on main branch"
            LATEST_COMMIT_ON_MAIN_PR=`git log -n 2 origin/main --pretty=format:"%H" | tail -n 1`
            echo $LATEST_COMMIT_ON_MAIN_PR


            FILES_CHANGED=`git diff --name-only $LATEST_COMMIT_ON_MAIN_PR $LATEST_COMMIT_ON_MAIN_ORIGIN`

            #if [[ $LATEST_COMMIT_ON_MAIN_ORIGIN ==  $LATEST_COMMIT_ON_MAIN_PR ]]
            #then
            #  echo "First commit"
            #  FILES_CHANGED=`git diff --name-only $GIT_CLONE_COMMIT_HASH $LATEST_COMMIT_ON_MAIN_ORIGIN`
            #  echo "$FILES_CHANGED"
            #else [[ $LATEST_COMMIT_ON_MAIN_PR == $GIT_CLONE_COMMIT_HASH ]]
            #  echo "merge made by the ort strategy"
            #  FILES_CHANGED=`git diff --name-only $GIT_CLONE_COMMIT_HASH $LATEST_COMMIT_ON_MAIN_ORIGIN`
            #  echo "$FILES_CHANGED"
            #fi

            echo "$FILES_CHANGED"
            echo "Based on the files changed, run corresponding workflow"
            STR=$FILES_CHANGED

            SUB_APP1="TestApp1"
            SUB_APP2="TestApp2"

            if [[ "$STR" == *"$SUB_APP1"* ]] && [[ "$STR" == *"$SUB_APP2"* ]] ; then
                echo "Both app changed: run WF1 and WF2"
            elif [[ "$STR" == *"$SUB_APP1"* ]]; then
                echo "TestApp1 changed: run WF1"
            elif [[ "$STR" == *"$SUB_APP2"* ]]; then
                echo "TestApp2 changed: run WF2"
            else
                echo "only Root changed: run Common"
            fi
    - cache-pull@2: {}
    - cache-push@2: {}
    - deploy-to-bitrise-io@2: {}
trigger_map:
- push_branch: main
  workflow: General
- pull_request_source_branch: app1-*
  workflow: App1
- pull_request_source_branch: app2-*
  workflow: App2
- pull_request_source_branch: general-*
  workflow: General
meta:
  bitrise.io:
    stack: osx-xcode-14.1.x
